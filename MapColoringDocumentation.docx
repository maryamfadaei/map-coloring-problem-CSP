SUMMARY
This is to practice constraint satisfaction problems. Which allows general purpose algorithm be more useful than search algorithm.
In order to work we need to create constraint graph. Backtracking search will travers all the branches and try to assign color to nodes. The backtracking algorithm efficiency improves by these heuristics.
Which variable should be assigned next?
This uses minimum remaining values heuristic (MRV).
Which variable should be assigned next?
Degree heuristic(DH).
The degree heuristic uses when several vertices have the same MRV value. Then use this as tie-breaker.
In what order should its values be tried?
This uses least constraining value heuristic(LVC).
So we combine these heuristic with the basic backtracking algorithm, in order to enter the most promising branches and also detect failure early.
Both MRV and DH are design to choose variable that causes failure first.
LVC tries to avoid failure. it assigns values for the variable that leave maximum flexibility for the remaining variables.
IMPLEMENTATION
Backtracking (Depth-First) search.  The approach is to first order variables and then assign color to them.

Program
Some general idea on variables, high level implementation:
_Visited: The input structure is a graph so we need to keep track of the visited node in our graph in order to terminate the DFS search.
NodeDegrees: degreed of each vertex are calculated at the beginning and stores in an array (counting the nodes in the list).
ColoredMap: array that keeps the color of the node assigned. Print this array at the end to display the result.
_NumberOfColors: number of colors form input file.
Main program top level:
Load the graph as per input file. Crate a Map. Sort the graph descending order on degree. 
Then call Color(colors) to color the graph. 
Coloring first node:
DFSsearch()
Begin;
Node not visited;
Start from the node;
Call GetLCV(vertex,colors);
 Loop until graph not Null;
Find adjacent node using MRV+DH heuristic;
If not visited;
Recursively call DFSsearch;
End;
GetLCV()
Idea was to per each color find its total usage in entire graph. Based on density of the color we chose the 
Begin;
For each color in colors;
Set total of that color zero;
Find the neighbors of the current node
If same color not safe break;
For each neighbor if their color is the same as the color then increment the total;
If this color is safe then return the color and its total;
End; 
Test
Command prompt in case that user forgets to insert text file as input when executing the program
 
Test case 1: 
Same input as test file provided for this assignment.
(10 4
(1 2 3 4 6 7 10)
(2 1 3 4 5 6)
(3 1 2)
(4 1 2)
(5 2 6)
(6 1 2 5 7 8)
(7 1 6 8 9 10)
(8 6 7 9)
(9 7 8 10)
(10 1 7 9)
)
A graph with 10 nodes and 4 color.
 

Test case 2:
Same as above but with 3 colors as suggested in the assignment.
(10 4
(1 2 3 4 6 7 10)
(2 1 3 4 5 6)
(3 1 2)
(4 1 2)
(5 2 6)
(6 1 2 5 7 8)
(7 1 6 8 9 10)
(8 6 7 9)
(9 7 8 10)
(10 1 7 9)
)
A graph with 10 vertices and 3 colors
 

Test case 3:
Sample in the body of the assignment.
(5 3
(1 2 3)
(2 1 3)
(3 1 2)
(4 5)
(5 4)
)
A graph with 5 vertices and 3 colors
 
Test case 4:
(11 4
(1 2 3 4 6 7 10)
(2 1 3 4 5 6)
(3 1 2)
(4 1 2)
(5 2 6)
(6 1 2 5 7 8)
(7 1 6 8 9 10)
(8 6 7 9)
(9 7 8 10)
(10 1 7 9)
(11)
)
A graph with 11 nodes and 4 colors.  Last node (11) is an independent node or sub problem.
v 
